//@flow
<<<<<<< HEAD
import * as React               from 'react'
import { connect }              from 'react-redux'
import { compose, withProps }   from 'recompose'
import User                     from './../../../containers/User'
import { goToMeditation }       from './../../../redux/actions/nav.actions'
import MeditationDashobardCell  from './../components/DashboardCells/MeditationDashobardCell'
=======
import * as React from 'react'
import R from 'ramda'
import { connect } from 'react-redux'
import { compose } from 'recompose'
import { goToMeditation } from './../../../redux/actions/nav.actions'
import combineSelectors from '../../../redux/selectors/combineSelectors'
import selectors from '../../../redux/selectors'
import MeditationDashobardCell from './../components/DashboardCells/MeditationDashobardCell'
import ProgressDashboardCell from './../components/DashboardCells/ProgressDashboardCell'
>>>>>>> WIP

const meditationCell = R.cond([
	[
		selectors.showUserMeditationOption,
		({ dispatch }) => ({
			title: `I want to Meditate`,
			onPress: () => dispatch(goToMeditation())
		})
	],
	[R.T, () => undefined]
])

<<<<<<< HEAD
const DashboardCellsContainer = ({ show = true }: { show: boolean }) => {
  return show ? (
    <User>
      {({ userState, isLoggedIn }) => (
        <React.Fragment>
          <MeditationDashobardCellContainer />
        </React.Fragment>
      )}
    </User>
  ) : null
}
=======
const DashboardCellsContainer = compose(
	connect(
		combineSelectors({
			showUserProgress: selectors.showUserProgress,
			meditationCell
		})
	)
)(({ showUserProgress, meditationCell }: { showUserProgress: boolean, meditationCell: any }) => (
	<React.Fragment>
		{showUserProgress && <ProgressDashboardCell />}
		{meditationCell && <MeditationDashobardCell {...meditationCell} />}
	</React.Fragment>
))
>>>>>>> WIP

export default DashboardCellsContainer
