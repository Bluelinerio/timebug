apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-sentry/sentry.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.2'

    defaultConfig {
        applicationId "io.lifevision"
        minSdkVersion 23
        targetSdkVersion 27
        versionCode 45

        // testBuildType System.getProperty('testBuildType', 'debug')  //this will later be used to control the test apk build type
        // missingDimensionStrategy "minReactNative", "minReactNative46" //read note
        
        //REQUIRED FOR DETOX DO NOT REMOVE
        // testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        
        versionName "2.0.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }
    ext {
        googlePlayServicesVersion = "15.0.1" // default: "+"
        compileSdkVersion = 27
        buildToolsVersion = "27.0.2"
        targetSdkVersion = 27
        supportLibVersion = "27.0.2"
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    signingConfigs {
        release {
            if (System.getenv()["CI"]) { // CI=true is exported by Nevercode
                storeFile file(System.getenv()["NC_RELEASE_KEYSTORE_PATH"])
                storePassword System.getenv()["NC_RELEASE_KEYSTORE_PASSWORD"]
                keyAlias System.getenv()["NC_RELEASE_KEY_ALIAS"]
                keyPassword System.getenv()["NC_RELEASE_KEY_PASSWORD"]
            } else if ( project.hasProperty("RELEASE_STORE_FILE") ) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
        stagingRelease {
            if (System.getenv()["CI"] == 'true') { // CI=true is exported by Nevercode
                storeFile file(System.getenv()["NC_STAGING_KEYSTORE_PATH"])
                storePassword System.getenv()["NC_STAGING_KEYSTORE_PASSWORD"]
                keyAlias System.getenv()["NC_STAGING_KEY_ALIAS"]
                keyPassword System.getenv()["NC_STAGING_KEY_PASSWORD"]
            } else if (project.hasProperty("RELEASE_STAGING_STORE_FILE") && RELEASE_STAGING_STORE_FILE != 'null' ) {
                storeFile file(RELEASE_STAGING_STORE_FILE)
                storePassword RELEASE_STAGING_STORE_PASSWORD
                keyAlias RELEASE_STAGING_KEY_ALIAS
                keyPassword RELEASE_STAGING_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        debug {
            // Note: CodePush updates should not be tested in Debug mode as they are overriden by the RN packager. However, because CodePush checks for updates in all modes, we must supply a key.
            buildConfigField "String", "CODEPUSH_KEY", '""'
            applicationIdSuffix ".debug"
        }
        stagingRelease {
            buildConfigField "String", "CODEPUSH_KEY", '"dTJB0ULD8DnwXbNqNR55nd5XzrXvSJmDXb3YX"'
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            applicationIdSuffix ".staging"
            matchingFallbacks = ['release']
//             signingConfig signingConfigs.stagingRelease
        }
        release {
            buildConfigField "String", "CODEPUSH_KEY", '"9jZMzq8MI4FUBjmq76yg1EEipx9cBymDQW3FX"'
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }

    //Required to solve duplicate files error on detox
    packagingOptions {
        exclude 'META-INF/LICENSE'
    }
}

dependencies {
    implementation project(':react-native-gesture-handler')
    implementation project(':react-native-sound')
    implementation project(':react-native-sentry')
    implementation project(':react-native-code-push')
    implementation project(':react-native-device-info')
    implementation project(':react-native-svg')
    implementation 'com.facebook.android:facebook-android-sdk:4.34.0'
    implementation project(':react-native-fbsdk')
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-video')
    implementation project(':react-native-keep-awake')
    implementation project(':react-native-contacts')
    implementation project(':react-native-unified-contacts')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:27.0.2"
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation project(':react-native-linear-gradient')
    implementation project(':react-native-push-notification')
    implementation 'com.google.android.gms:play-services-base:15.0.1'
    implementation 'com.google.android.gms:play-services-basement:15.0.1'
    implementation 'com.google.android.gms:play-services-tasks:15.0.1'
    implementation ('com.google.android.gms:play-services-gcm:15.0.1') {
        force = true;
    }

    // androidTestImplementation(project(path: ":detox"))
    // androidTestImplementation 'junit:junit:4.12'
    // androidTestImplementation 'com.android.support.test:runner:1.0.1'
    // androidTestImplementation 'com.android.support.test:rules:1.0.1'

    //Uncomment if some sort of incompatibility surges with jackson
//     androidTestCompile(project(path: ":detox", configuration: "oldOkhttpDebug"), {
//      exclude group: 'com.android.support', module: 'support-annotations'
//      exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
//      exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
    // })
    // androidTestCompile 'com.fasterxml.jackson.core:jackson-core:2.8.7'
    // androidTestCompile 'com.fasterxml.jackson.core:jackson-databind:2.8.7'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
