// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Tests related to the meditation timer container should render 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Connect(mapProps(MeditationTimer))
    daysInRowCount={2}
    disableTimer={false}
    meditationData={Object {}}
    onTimerFinish={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "daysInRowCount": 2,
      "disableTimer": false,
      "meditationData": Object {},
      "onTimerFinish": [MockFunction],
      "unlockAchievement": [Function],
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "daysInRowCount": 2,
        "disableTimer": false,
        "meditationData": Object {},
        "onTimerFinish": [MockFunction],
        "unlockAchievement": [Function],
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "context": Object {
      "store": Object {
        "dispatch": [Function],
        "getAction": [Function],
        "getActions": [Function],
        "getState": [Function],
        "isActionDispatched": [Function],
        "isActionTypeDispatched": [Function],
        "subscribe": [Function],
      },
    },
    "hydrateIn": undefined,
  },
}
`;
